diff --git a/Source/JavaScriptCore/disassembler/udis86/ud_opcode.py b/Source/JavaScriptCore/disassembler/udis86/ud_opcode.py
index f8273806..b65bb176 100644
--- a/Source/JavaScriptCore/disassembler/udis86/ud_opcode.py
+++ b/Source/JavaScriptCore/disassembler/udis86/ud_opcode.py
@@ -106,19 +106,19 @@ class UdOpcodeTables:
         # A mapping of opcode extensions to their representational
         # values used in the opcode map.
         OpcExtMap = {
-            '/rm'    : lambda v: "%02x" % int(v, 16),
-            '/x87'   : lambda v: "%02x" % int(v, 16),
-            '/3dnow' : lambda v: "%02x" % int(v, 16),
-            '/reg'   : lambda v: "%02x" % int(v, 16),
-            # modrm.mod
+            '/rm'    : lambda v: int(v, 16),
+            '/x87'   : lambda v: int(v, 16),
+            '/3dnow' : lambda v: int(v, 16),
+            '/reg'   : lambda v: int(v, 16),
+           # modrm.mod
             # (!11, 11)    => (00, 01)
             '/mod'   : lambda v: '00' if v == '!11' else '01',
             # Mode extensions:
             # (16, 32, 64) => (00, 01, 02)
-            '/o'     : lambda v: "%02x" % (int(v) / 32),
-            '/a'     : lambda v: "%02x" % (int(v) / 32),
-            '/m'     : lambda v: "%02x" % (int(v) / 32),
-            '/sse'   : lambda v: UdOpcodeTables.OpcExtIndex['sse'][v]
+            '/o'     : lambda v: (int(v) / 32),
+            '/a'     : lambda v: (int(v) / 32),
+            '/m'     : lambda v: 1 if v == '64' else 0,
+           '/sse'   : lambda v: UdOpcodeTables.OpcExtIndex['sse'][v]
         }

         def __init__(self, prefixes, mnemonic, opcodes, operands, vendor):


